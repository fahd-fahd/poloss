#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ุณูุฑูุจุช ุชุดุฎูุตู ููุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
"""

import os
import sys
import json
import logging
from pathlib import Path
import traceback

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("diagnostics")

# ูุญุงููุฉ ุชุญููู ููู .env ูุฏูููุง
def load_dotenv_file():
    """ุชุญููู ููู .env ูุฏูููุง"""
    logger.info("ูุญุงููุฉ ุชุญููู ููู .env ูุฏูููุง...")
    env_path = Path(".env")
    
    if not env_path.exists():
        logger.error("โ ููู .env ุบูุฑ ููุฌูุฏ")
        return False
    
    try:
        # ูุญุงููุฉ ุงุณุชูุฑุงุฏ ุงูููุชุจุฉ
        try:
            from dotenv import load_dotenv
            logger.info("โ ุชู ุงุณุชูุฑุงุฏ ููุชุจุฉ dotenv ุจูุฌุงุญ")
        except ImportError:
            logger.error("โ ูุดู ุงุณุชูุฑุงุฏ ููุชุจุฉ dotenv")
            logger.info("ูุญุงููุฉ ุชุซุจูุช ุงูููุชุจุฉ...")
            os.system("pip install python-dotenv")
            from dotenv import load_dotenv
            logger.info("โ ุชู ุชุซุจูุช ูุงุณุชูุฑุงุฏ ููุชุจุฉ dotenv ุจูุฌุงุญ")
        
        # ุชุญููู ุงูููู
        load_dotenv(env_path)
        logger.info("โ ุชู ุชุญููู ููู .env ุจูุฌุงุญ")
        
        # ุทุฑููุฉ ุจุฏููุฉ ูุชุญููู ุงูููู ูุฏูููุง
        logger.info("ูุญุงููุฉ ุชุญููู ููู .env ูุฏูููุง ููุณุฎุฉ ุงุญุชูุงุทูุฉ...")
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                key, value = line.split('=', 1)
                os.environ[key] = value
        logger.info("โ ุชู ุชุญููู ููู .env ูุฏูููุง ุจูุฌุงุญ")
        
        return True
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ููู .env: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def check_env_variables():
    """ุงูุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุงูุฑุฆูุณูุฉ"""
    logger.info("ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ:")
    
    # ูุงุฆูุฉ ุงููุชุบูุฑุงุช ุงููููุฉ
    important_vars = [
        "TOKEN", "MONGODB_URI", "PREFIX", "DB_NAME", 
        "NODE_ENV", "PORT", "LOG_LEVEL"
    ]
    
    # ูุญุต ูู ูุชุบูุฑ
    results = {}
    for var in important_vars:
        value = os.getenv(var)
        if value:
            # ุฅุฎูุงุก ููู ุงููุชุบูุฑุงุช ุงูุญุณุงุณุฉ
            if var in ["TOKEN", "MONGODB_URI"]:
                masked_value = value[:5] + "..." if len(value) > 8 else "***"
                results[var] = f"โ ููุฌูุฏ ({masked_value})"
            else:
                results[var] = f"โ ููุฌูุฏ ({value})"
        else:
            results[var] = "โ ุบูุฑ ููุฌูุฏ"
    
    # ุนุฑุถ ุงููุชุงุฆุฌ
    for var, status in results.items():
        logger.info(f"{var}: {status}")
    
    return all(value.startswith("โ") for value in results.values())

def test_mongodb_connection():
    """ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB"""
    logger.info("ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB:")
    
    mongodb_uri = os.getenv("MONGODB_URI")
    if not mongodb_uri:
        logger.error("โ MONGODB_URI ุบูุฑ ููุฌูุฏ")
        return False
    
    try:
        # ูุญุงููุฉ ุงุณุชูุฑุงุฏ ุงูููุชุจุฉ
        try:
            import motor.motor_asyncio
            logger.info("โ ุชู ุงุณุชูุฑุงุฏ ููุชุจุฉ motor ุจูุฌุงุญ")
        except ImportError:
            logger.error("โ ูุดู ุงุณุชูุฑุงุฏ ููุชุจุฉ motor")
            logger.info("ูุญุงููุฉ ุชุซุจูุช ุงูููุชุจุฉ...")
            os.system("pip install motor")
            import motor.motor_asyncio
            logger.info("โ ุชู ุชุซุจูุช ูุงุณุชูุฑุงุฏ ููุชุจุฉ motor ุจูุฌุงุญ")
        
        # ุงุณุชูุฑุงุฏ asyncio
        import asyncio
        
        # ูุญุงููุฉ ุงูุงุชุตุงู
        async def test_connection():
            try:
                # ุฅูุดุงุก ุงุชุตุงู MongoDB
                client = motor.motor_asyncio.AsyncIOMotorClient(
                    mongodb_uri,
                    serverSelectionTimeoutMS=5000
                )
                
                # ูุญุงููุฉ ุงูุงุชุตุงู ูุงูุชุญูู
                await client.server_info()
                
                # ุงูุญุตูู ุนูู ุงุณู ูุงุนุฏุฉ ุงูุจูุงูุงุช
                db_name = os.getenv("DB_NAME", "discord_bot")
                db = client[db_name]
                
                # ูุญุงููุฉ ูุฑุงุกุฉ ุฃุณูุงุก ุงููุฌููุนุงุช
                collections = await db.list_collection_names()
                logger.info(f"โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {db_name}")
                logger.info(f"ุงููุฌููุนุงุช ุงููุชุงุญุฉ: {collections}")
                return True
            except Exception as e:
                logger.error(f"โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {str(e)}")
                logger.error(traceback.format_exc())
                return False
        
        # ุชุดุบูู ุงูุงุฎุชุจุงุฑ
        result = asyncio.run(test_connection())
        return result
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def test_discord_connection():
    """ูุญุงููุฉ ุงูุชุญูู ูู ุชููู Discord"""
    logger.info("ูุญุงููุฉ ุงูุชุญูู ูู ุชููู Discord:")
    
    token = os.getenv("TOKEN")
    if not token:
        logger.error("โ TOKEN ุบูุฑ ููุฌูุฏ")
        return False
    
    try:
        # ูุญุงููุฉ ุงุณุชูุฑุงุฏ ุงูููุชุจุฉ
        try:
            import discord
            logger.info("โ ุชู ุงุณุชูุฑุงุฏ ููุชุจุฉ discord ุจูุฌุงุญ")
        except ImportError:
            logger.error("โ ูุดู ุงุณุชูุฑุงุฏ ููุชุจุฉ discord")
            logger.info("ูุญุงููุฉ ุชุซุจูุช ุงูููุชุจุฉ...")
            os.system("pip install discord.py")
            import discord
            logger.info("โ ุชู ุชุซุจูุช ูุงุณุชูุฑุงุฏ ููุชุจุฉ discord ุจูุฌุงุญ")
        
        # ุงุณุชูุฑุงุฏ asyncio
        import asyncio
        
        # ูุญุงููุฉ ุงูุชุญูู ูู ุงูุชููู
        async def test_token():
            try:
                # ุฅูุดุงุก ุนููู Discord
                client = discord.Client(intents=discord.Intents.default())
                
                # ูุญุงููุฉ ุชุณุฌูู ุงูุฏุฎูู
                try:
                    await client.login(token)
                    logger.info("โ ุชู ุงูุชุญูู ูู ุชููู Discord ุจูุฌุงุญ")
                    await client.close()
                    return True
                except discord.LoginFailure:
                    logger.error("โ ุชููู Discord ุบูุฑ ุตุงูุญ")
                    return False
                except Exception as e:
                    logger.error(f"โ ุฎุทุฃ ุฃุซูุงุก ูุญุงููุฉ ุชุณุฌูู ุงูุฏุฎูู: {str(e)}")
                    return False
            except Exception as e:
                logger.error(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {str(e)}")
                logger.error(traceback.format_exc())
                return False
        
        # ุชุดุบูู ุงูุงุฎุชุจุงุฑ
        result = asyncio.run(test_token())
        return result
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {str(e)}")
        logger.error(traceback.format_exc())
        return False

def check_file_structure():
    """ุงูุชุญูู ูู ูููู ุงููููุงุช"""
    logger.info("ูุญุต ูููู ุงููููุงุช:")
    
    # ูุงุฆูุฉ ุงููููุงุช ูุงููุฌูุฏุงุช ุงููููุฉ
    important_files = [
        "app.py", "run.py", "Procfile", "requirements.txt",
        "python_bot/src/main.py", "python_bot/__init__.py", 
        "python_bot/src/__init__.py", "python_bot/utils/__init__.py"
    ]
    
    # ูุญุต ูู ููู
    results = {}
    for file_path in important_files:
        path = Path(file_path)
        if path.exists():
            results[file_path] = "โ ููุฌูุฏ"
        else:
            results[file_path] = "โ ุบูุฑ ููุฌูุฏ"
    
    # ุนุฑุถ ุงููุชุงุฆุฌ
    for file_path, status in results.items():
        logger.info(f"{file_path}: {status}")
    
    return all(value.startswith("โ") for value in results.values())

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    logger.info("=" * 50)
    logger.info("๐ ุจุฏุก ุงูุชุดุฎูุต")
    logger.info("=" * 50)
    
    # ูุญุงููุฉ ุชุญููู ููู .env
    load_dotenv_file()
    
    # ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    env_ok = check_env_variables()
    logger.info(f"ูุชูุฌุฉ ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ: {'โ ูุงุฌุญ' if env_ok else 'โ ูุงุดู'}")
    
    # ูุญุต ูููู ุงููููุงุช
    files_ok = check_file_structure()
    logger.info(f"ูุชูุฌุฉ ูุญุต ูููู ุงููููุงุช: {'โ ูุงุฌุญ' if files_ok else 'โ ูุงุดู'}")
    
    # ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    mongodb_ok = test_mongodb_connection()
    logger.info(f"ูุชูุฌุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {'โ ูุงุฌุญ' if mongodb_ok else 'โ ูุงุดู'}")
    
    # ูุญุงููุฉ ุงูุชุญูู ูู ุชููู Discord
    discord_ok = test_discord_connection()
    logger.info(f"ูุชูุฌุฉ ุงูุชุญูู ูู ุชููู Discord: {'โ ูุงุฌุญ' if discord_ok else 'โ ูุงุดู'}")
    
    # ุนุฑุถ ูุญุชูู ููู .env ุจุฏูู ุงูููู ุงูุญุณุงุณุฉ
    logger.info("=" * 50)
    logger.info("ูุญุชูู ููู .env (ุจุฏูู ุงูููู ุงูุญุณุงุณุฉ):")
    env_path = Path(".env")
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    logger.info(line)
                    continue
                try:
                    key, value = line.split('=', 1)
                    if key in ["TOKEN", "MONGODB_URI"]:
                        masked_value = value[:5] + "..." if len(value) > 8 else "***"
                        logger.info(f"{key}={masked_value}")
                    else:
                        logger.info(line)
                except Exception:
                    logger.info(line)
    else:
        logger.info("โ ููู .env ุบูุฑ ููุฌูุฏ")
    
    # ุงููุชูุฌุฉ ุงูุฅุฌูุงููุฉ
    overall = env_ok and files_ok and mongodb_ok and discord_ok
    logger.info("=" * 50)
    logger.info(f"ุงููุชูุฌุฉ ุงูุฅุฌูุงููุฉ: {'โ ูู ุงููุญูุตุงุช ูุงุฌุญุฉ' if overall else 'โ ุจุนุถ ุงููุญูุตุงุช ูุดูุช'}")
    logger.info("=" * 50)

if __name__ == "__main__":
    main() 